#include <Wire.h>
#include <MPU6050.h>
#include <Servo.h>

#define MPU6050_address 0x68  // Assuming the MPU6050 is at address 0x68
#define CONFIG_register 0x1A

MPU6050 mpu;
Servo motor1;
Servo motor2;

// PID gains
const float Kp = 1;
const float Ki = 0;
const float Kd = 0;

float previousError = 0;
float integral = 0;

void setup() {
  Wire.begin();
  mpu.initialize();
  motor1.attach(5);
  motor2.attach(6);
  
  // Example: Set DLPF to 5Hz bandwidth

  Serial.begin(9600);

  motor1.writeMicroseconds(1000);
  motor2.writeMicroseconds(1000);
  // Set DLPF
  Wire.beginTransmission(MPU6050_address);
  Wire.write(CONFIG_register);
  Wire.write(0x06);  // Set DLPF to 5Hz bandwidth (assuming gyro config bits are 0)
  Wire.endTransmission(true);
  
  delay(10000);
  
  Serial.println("Setup complete");
}

void loop() {
  int16_t ax, ay, az;
  int16_t gx, gy, gz;
  
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  float angle = atan2(ay, az);
  angle = angle * (180.0 / PI);
  
  float error = angle;  // assuming you want to control to 0 degrees
  integral += error;
  float derivative = error - previousError;
  
  int controlSignal = Kp*error + Ki*integral + Kd*derivative;
  
  controlSignal = constrain(controlSignal, -255, 255);
  
  int throttleCommand1 = map(controlSignal, -255, 255, 1000, 1300);
  int throttleCommand2 = map(controlSignal, -255, 255, 1300, 1000);  // Extended throttle range
  throttleCommand1 = constrain(throttleCommand1, 1000, 1300);
  throttleCommand2 = constrain(throttleCommand2, 1000, 1300);
  
  if (controlSignal > 0) {
    
  motor1.writeMicroseconds(throttleCommand1);
  } else {
    motor2.writeMicroseconds(throttleCommand2);;
  }

  // Added serial print statements for plotting
  Serial.print(angle);
  Serial.print(",");
  Serial.print(motor1.readMicroseconds());
  Serial.print(",");
  Serial.println(motor2.readMicroseconds());
  
  previousError = error;
  
  delay(1);
}
