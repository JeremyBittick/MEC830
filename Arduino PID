#include <Arduino.h>
#include <Wire.h>
#include <MPU6050.h>

const int enA = 3;
const int in1 = 5;
const int in2 = 6;

MPU6050 mpu;  // Create an instance of the MPU6050 class

float theta = 0.0;  // Variable to hold the theta value from the gyro
float setPoint = 0.0;  // The desired theta value (center)

// PID parameters
float Kp = 5;
float Ki = 0;
float Kd = 5;
float prevError = 0;
float integral = 0;

float filterRate = 0.98;  // Complementary filter rate
float dt = 0.01;  // Sample time

void setup() {
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  
  Wire.begin();
  mpu.initialize();
  
  Serial.begin(9600);
}

void loop() {
  // Read angular velocity and accelerometer data from MPU6050
  int16_t gx, gy, gz, ax, ay, az;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  float gyroRate = gx * (250.0 / 32768.0);  // Assuming a full-scale range of Â±250 dps and converting raw data to degrees per second
  float accelAngle = atan2(ay, az) * (180.0 / PI);  // Calculate angle from accelerometer data in degrees

  // Complementary filter
  theta = filterRate * (theta + gyroRate * dt) + (1 - filterRate) * accelAngle;

  // Print theta
  //Serial.print("Theta: ");
  //Serial.println(theta);

  // PID calculations
  float error = setPoint - theta;
  integral += error;
  float derivative = error - prevError;
  float output = Kp * error + Ki * integral + Kd * derivative;
  prevError = error;

  // Print output
  //Serial.print("Output: ");
  //Serial.println(output);

  // Map PID output to motor control
  int motorOutput = map(abs(output), 0, 255, 0, 255); 

  // Print motorOutput
  Serial.print("Motor Output: ");
  Serial.println(motorOutput);

  // Motor control
  if (output > 0) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
  }
  analogWrite(enA, motorOutput);

  delay(10);  // Assuming a loop time of 10 milliseconds
}
